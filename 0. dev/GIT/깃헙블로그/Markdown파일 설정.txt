yarn add gray-matter # 문자열이나 파일에서 머리말을 구문 분석, 파일에서 메타데이터와 내용 등 추출 시 사용
yarn add marked 
yarn add @types/marked # 타입스크립트의 경우
yarn add react-markdown # <div dangerouslySetInnerHTML={createMarkup()} />과 유사함
yarn add remark-gfm # 마크다운 문법이 다양하게 적용될 수 있도록 도와주는 플러그인
yarn add react-syntax-highlighter
yarn add @types/react-syntax-highlighter # 타입스크립트의 경우

참조
https://yarnpkg.com/package/react-markdown
https://yarnpkg.com/package/react-syntax-highlighter

posting 파일들은 src 파일 안에 있다고 가정

# [slug].tsx 파일 생성
import { GetStaticPaths, GetStaticProps } from "next";
import { join } from "path";
import fs from "fs/promises";
import matter from "gray-matter";
import ReactMarkdown from "react-markdown";

interface Props {
  title: string;
  date: string;
  content: string;
}

export default function BlogPost({ title, date, content }: Props) {
  return (
    <div>
      <h1>{title}</h1>
      <p>{date}</p>
      <ReactMarkdown>{content}</ReactMarkdown>
    </div>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  const postsDirectory = join(process.cwd() + "src" + "/posting", "blog");
  const filenames = await fs.readdir(postsDirectory);
  const paths = filenames.map(filename => ({
    params: { slug: filename.replace(/\.md$/, "") },
  }));
  return { paths, fallback: false };
};

export const getStaticProps: GetStaticProps<Props> = async ({ params }) => {
  const slug = params?.slug as string;
  const filePath = join(process.cwd() + "src" + "/posting", "blog", `${slug}.md`);
  const fileContents = await fs.readFile(filePath, "utf8");
  const { data, content } = matter(fileContents);
  return {
    props: {
      title: data.title,
      date: data.date,
      content,
    },
  };
};


# markdown 파일 생성
---
title: First Post
date: "2023-02-28" <- 숫자만 사용하면 newDate()처럼 생성되어 타입 오류 발생 가능
---

# Deploy and test

holollollo




### 여러 파일의 데이터 목록 불러오기

export const getStaticProps: GetStaticProps<{
  posts: MarkDownProps[];
}> = async () => {
  const dirPath = join(process.cwd() + "src", "posting");
  const mdFiles = await getMdFiles(dirPath);
  const posts: MarkDownProps[] = [];
  for (const filePath of mdFiles) {
    const fileContents = await fs.readFile(filePath, "utf8");
    const { data, content } = matter(fileContents);
    posts.push({
      title: data.title,
      description: data.description,
      category: data.category,
      date: data.date,
      content,
    });
  }
  return {
    props: {
      posts,
    },
  };
};

async function getMdFiles(dirPath: string): Promise<string[]> {
  const mdFiles: string[] = [];
  const files = await fs.readdir(dirPath);
  for (const file of files) {
    const filePath = join(dirPath, file);
    const stats = await fs.stat(filePath);
    if (stats.isDirectory()) {
      mdFiles.push(...(await getMdFiles(filePath)));
    } else if (stats.isFile() && file.endsWith(".md")) {
      mdFiles.push(filePath);
    }
  }
  return mdFiles;
}


### markdown파일 렌더링 &&  code block에 highlight 넣기

import ReactMarkdown from "react-markdown";
import styled from "styled-components";
import { MarkDownProps } from "@/types/pages";
import { RecommandList } from "./RecommandList";
import remarkGfm from "remark-gfm";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
// import { darcula } from "react-syntax-highlighter/dist/esm/styles/prism"; // esm은 오류 유발
import { dark } from "react-syntax-highlighter/dist/cjs/styles/prism"; // 무조건 cjs/styles/prism 으로 import할 것
import { vsDark } from "react-syntax-highlighter/dist/cjs/styles/prism";
import { darcula } from "react-syntax-highlighter/dist/cjs/styles/prism";

export const PostTemplate = ({
  title,
  description,
  category,
  date,
  content,
}: MarkDownProps) => {
  return (
    <>
      <HeaderSection>
        <h1>{title}</h1>
        <p>{description}</p>
        <span>{date}</span>
      </HeaderSection>
      <MainContent>
        <ReactMarkdown
          className="markdown"
          remarkPlugins={[remarkGfm]}
          components={{
            code({ inline, className, children, ...props }) {
              const match = /language-(\w+)/.exec(className || "");
              return !inline && match ? (
                <SyntaxHighlighter
                  language={match[1]}
                  PreTag="div"
                  {...props}
                  style={dark}
                  // style={darcula}
                  // style={vsDark}
                >
                  {String(children).replace(/\n$/, "")}
                </SyntaxHighlighter>
              ) : (
                <code className={className} {...props}>
                  {children}
                </code>
              );
            },
          }}
        >
          {content}
        </ReactMarkdown>
      </MainContent>
      {/* <RecommandList mainCategory={category} /> */}
      {/* <div>
        <p>댓글</p>
        <div></div>
      </div> */}
    </>
  );
};

const HeaderSection = styled.section`
  & h1 {
    font-weight: bold;
    font-size: 2rem;
  }
  & p {
    margin-top: 10px;
    font-weight: bold;
    font-size: 1.2rem;
  }
  & span {
    font-weight: bold;
    font-size: 0.9rem;
  }
`;

const MainContent = styled.main`
  margin-top: 80px;

  // markdown
  .markdown {
    font-size: 1.2rem;
    line-height: 1.5;
    color: #333;
  }

  .markdown h1 {
    font-size: 1.6rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .markdown h2 {
    font-size: 1rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .markdown p {
    margin-bottom: 1rem;
  }

  .markdown a {
    color: #0070f3;
    text-decoration: underline;
  }

  .markdown pre {
    margin: 20px 0 80px 0;
    padding: 20px;
    background-color: #161b22;
    /* background-color: #161b22; */
    /* color: white; */
    font-size: 0.9rem;
    font-family: "Consolas", "Sans Mono", "Courier", "monospace";
    border-radius: 10px;

    /* & span {
      background-color: #161b22;
    } */
  }

  .markdown code {
  }
`;

